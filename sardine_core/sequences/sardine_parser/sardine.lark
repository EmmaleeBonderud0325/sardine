?start: pattern
pattern: sum sum* -> return_pattern


?function: "(" patname sum* (SPACE sum)* ("::" NAME atom)* ")" -> function_call

?sum: product
    | product "+" sum                  -> addition
    | product "-" sum                  -> substraction
    | product "%" sum                  -> modulo
    | product "|%" sum                  -> whole_part
    | product ":" sum                  -> assoc_sp_number

?product: atom
     | product ">" atom                -> is_greater
     | product "<" atom                -> is_smaller
     | product ">=" atom               -> is_greater_or_equal
     | product "==" atom               -> is_equal
     | product "<=" atom               -> is_smaller_or_equal
     | product "*" atom                -> multiplication
     | product "/" atom                -> division
     | product "//" atom               -> floor_division
     | product "|" atom                -> choice
     | product "~" atom                -> random_in_range
     | product "!" atom                -> extend
     | product "!!" atom               -> extend_repeat
     | product "^" atom                -> chord_reverse
     | product "&" atom                -> get_slice


?atom: NUMBER                          -> number
     | function
     | col
     | patname
     | "-" atom                        -> negation
     | ("Â°"|"rand")                    -> get_random_number
     | "$"                             -> get_iterator_value
     | "(" sum "->" sum ")"            -> generate_ramp
     | "(" sum "->" sum "," sum ")"    -> generate_ramp_with_range
     | "(" sum sum* ")"                -> make_list
     | "{" sum sum* "}"                -> make_chord
     | SILENCE+                        -> silence

?patname: name_sum

?name_sum: name_product
    | name_sum "!" sum                     -> extend
    | name_sum "!!" sum                    -> extend_repeat
    | name_sum "/" name_product            -> specify_address
    | name_sum ":" sum                     -> assoc_sp_number

?name_product: name_atom
    | name_product "|" name_atom           -> choice

?name_atom: NAME                           -> name


?col0 : note
      | note "@" NAME             -> add_qualifier
?col1 : col0
      | col0 "^" sum              -> chord_reverse
?col  : col1


?base_note: NOTE                 -> make_note
?alt_note: base_note
    | base_note "b"              -> note_flat
    | base_note "#"              -> note_sharp
?final_note: alt_note
    |  alt_note NUMBER           -> note_set_octave
    | (alt_note|final_note) "'"  -> note_octave_up
    | (alt_note|final_note) "_"  -> note_octave_down

?note: final_note                -> finish_note


// BASE TOKENS //////////////////////////////////////////
NOTE: (NOTE_EN | NOTE_ENB | NOTE_FR)
NOTE_EN:  "A"  | "B"  | "C"  | "D"  | "E"   | "F"  | "G"
NOTE_ENB: "Ab" | "Bb" | "Cb" | "Db" | "Eb"  | "Fb" | "Gb"
NOTE_FR:  "Do" | "Re" | "Mi" | "Fa" | "Sol" | "La" | "Si"

NAME: LCASE_LETTER (LETTER|DIGIT+)*

SILENCE: "."

SPACE: /[\s\t\f\r\n]/
%ignore SPACE

%import common.LCASE_LETTER
%import common.UCASE_LETTER
%import common.LETTER -> LETTER
%import common.DIGIT  -> DIGIT
%import common.NUMBER
