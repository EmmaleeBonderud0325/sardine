// A pattern is a succession of things ////////////////////////////////////////

?start: pattern
pattern: (item|superlist) (_COMMA (item|superlist)?)* -> return_pattern

///////////////////////////////////////////////////////////////////////////////


// Rules concerning lists and interaction with other tokens ///////////////////

?superlist: uplist
          | uplist _PLUS superlist                 -> list_addition
          | uplist _MINUS superlist                -> list_substraction
          | uplist _MODULO superlist               -> list_modulo

?uplist: list
       | list _TIMES uplist                        -> list_multiplication
       | list _TIMES sum                           -> multiplication
       | list "/" uplist                           -> list_division
       | list "/" sum                              -> division
       | list "//" uplist                          -> list_floor_division
       | list "//" sum                             -> floor_division
       | list _PIPE uplist                         -> list_choice
       | list _PIPE sum                            -> choice_note
       | list _REPEAT uplist                       -> list_extend
       | list _REPEAT sum                          -> list_extend
       | list _REPEAT2 sum                         -> list_extend_repeat
       | list _REPEAT2 uplist                      -> list_extend_repeat
       | list _PLUS sum                            -> addition
       | list _PLUS uplist                         -> list_addition
       | list _MINUS sum                           -> substraction 
       | list _MINUS uplist                        -> list_substraction
       | list _MODULO sum                          -> modulo
       | list _MODULO uplist                       -> list_modulo

list: _LBRA item (_COMMA item)* _COMMA? _RBRA      -> make_list
    | _LBRA list (_COMMA list)* _COMMA? _RBRA      -> make_list
    | _LPAR superlist _RPAR                        -> id
    | sum _US sum                                  -> generate_ramp
    | sum _US sum _LPAR sum _RPAR                  -> generate_ramp_with_range

item: (sum|col|patname)                            -> id

///////////////////////////////////////////////////////////////////////////////


// Rules concerning numbers ///////////////////////////////////////////////////

?sum: product
    | product _PLUS sum                -> addition
    | product _MINUS sum               -> substraction
    | product _MODULO sum              -> modulo

?product: atom
     | product _TIMES product          -> multiplication
     | product "/" product             -> division
     | product "//" product            -> floor_division
     | product _PIPE product           -> choice
     | product _COLON  product         -> random_in_range
     | product _REPEAT product         -> extend
     | product _REPEAT2 product        -> extend_repeat

?atom: NUMBER                          -> number
     | _NEG atom                       -> negation
     | _TIME                           -> get_time
     | _MEASURE                        -> get_measure
     | _PHASE                          -> get_phase
     | _UNIXTIME                       -> get_unix_time
     | _RANDOM                         -> get_random_number
     | _LPAR sum _RPAR

///////////////////////////////////////////////////////////////////////////////

// Rules concerning names /////////////////////////////////////////////////////

?patname: compose_name
    | compose_name _COLON (sum|list)           -> assoc_sp_number
    | (compose_name|patname) _REPEAT sum       -> repeat_name
    | compose_name  _PIPE patname              -> choice_name

?compose_name: name
    | compose_name "/" name                    -> specify_address

?name: NAME                                    -> name_disamb
    | NAME sum                                 -> name_from_name_number

///////////////////////////////////////////////////////////////////////////////

// Rules about notes /////////////////////////////////////////////////////////

?col : note                                                 -> id
     | col _RIGHT_ARROW name                                -> add_qualifier
     | col _DOT name                                        -> add_modifier

?note: NOTE (NUMBER)? (FLAT|SHARP)? (OCTSHIFTUP|OCTSHIFTDOWN)* -> make_note
     | note _PLUS   (col|list|sum)                          -> waddition
     | note _MINUS  (col|list|sum)                          -> wsubstraction 
     | note _TIMES  (col|list|sum)                          -> wmultiplication
     | note _MODULO (col|list|sum)                          -> wmodulo
     | note "/"     (col|list|sum)                          -> wdivision
     | note "//"    (col|list|sum)                          -> wfloor_division
     | note _REPEAT sum                                     -> repeat_collection
     | _LPAR col _RPAR

///////////////////////////////////////////////////////////////////////////////
     
// Tokens /////////////////////////////////////////////////////////////////////

A.0: "A"
B.0: "B"
C.0: "C"
D.0: "D"
E.0: "E"
F.0: "F"
G.0: "G"
NOTE.0: (A|B|C|D|E|F|G)
NAME.10: (LETTER)~2 (LETTER|DIGIT+)*
OCTSHIFTUP: "'"
OCTSHIFTDOWN: "."
FLAT: "b"
SHARP: "#"
_RIGHT_ARROW: "->"
_LEFT_ARROW: "<-"
_PLUS: "+"
_MINUS: "-"
_NEG: "-"
_TIMES: "*"
_EQUAL: "="
_MODULO: "%"
_REPEAT: "!"
_REPEAT2: "!!"
_LPAR: "("
_RPAR: ")"
_LBRA: "["
_RBRA: "]"
_PIPE: "|"
_US: "_"
_COLON: ":"
_COMMA: ","
_DOT: "."
_RANDOM: "r"
_TIME: "t"
_MEASURE: "m"
_PHASE: "p"
_UNIXTIME: "u"
_RECOVER: "&"
_FLAT: "f"
_SHARP: "#"

%import common.LETTER -> LETTER
%import common.DIGIT  -> DIGIT
%import common.NUMBER
%import common.WS_INLINE
%ignore WS_INLINE
