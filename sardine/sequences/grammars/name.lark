?start: final_name
    | final_number
?final_number:  product_number
    | final_number "+" product_number                       -> addition
    | final_number "-" product_number                       -> substraction
    | "[" final_number ("," final_number)* ","? "]"         -> make_list
?product_number: number_atom
    | product_number  "*"  product_number                   -> multiplication
    | product_number  "/"  product_number                   -> division
    | product_number  "|"  product_number                   -> choice
    | product_number  ":"  product_number                   -> random_in_range
    | product_number  "!"  product_number                   -> extend
    | product_number  "!!" product_number                   -> extend_repeat
?number_atom: INT                                           -> make_number
    | "(" number_atom ")"
    | "r"                                                   -> get_random_number
    | number_atom "_" number_atom                           -> generate_ramp
?final_name: pre_final_name
    | pre_final_name ":" final_number                       -> associate_sample_number
    | (compose_name|final_name) "!" final_number            -> repeat_name
    | "(" final_name ")"
?pre_final_name: compose_name
    | (compose_name|name_list) "|" (compose_name|name_list) -> choice_name
    | "(" pre_final_name ")"
// Arithmetics on the name level
?compose_name: name
    | name "+" name                                         -> add_name 
    | name "-" name                                         -> sub_name
    | "(" compose_name ")"
// Name tokens are a combination of number + letters
?name : NAME                                                -> name
    | number_atom NAME                                      -> name_from_number_name
    | NAME number_atom                                      -> name_from_name_number
    | "(" name ")"

?name_list: "[" name("," name)* ","? "]"                    -> make_list

NAME: (LETTER) (LETTER|DIGIT)*                             

%import common.LETTER                                       -> LETTER
%import common.DIGIT                                        -> DIGIT
%import common.INT                                          -> INT
%import common.NUMBER                                       -> NUMBER
%import common.WS_INLINE
%ignore WS_INLINE